
# Telegraf Configuration
#
# Telegraf is entirely plugin driven. All metrics are gathered from the
# declared inputs, and sent to the declared outputs.
#
# Plugins must be declared in here to be active.
# To deactivate a plugin, comment out the name and any variables.
#
# Use 'telegraf -config telegraf.conf -test' to see what metrics a config
# file would generate.
#
# Environment variables can be used anywhere in this config file, simply prepend
# them with $. For strings the variable must be within quotes (ie, "$STR_VAR"),
# for numbers and booleans they should be plain (ie, $INT_VAR, $BOOL_VAR)


# Global tags can be specified here in key="value" format.
[global_tags]
  # dc = "us-east-1" # will tag all metrics with dc=us-east-1
  # rack = "1a"
  ## Environment variables can be used as tags, and throughout the config file
  # user = "$USER"
  app_name_descr="Host-stats-collector"


# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "30s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = false

  ## Telegraf will send metrics to outputs in batches of at
  ## most metric_batch_size metrics.
  metric_batch_size = 1000
  ## For failed writes, telegraf will cache metric_buffer_limit metrics for each
  ## output, and will flush this buffer on a successful write. Oldest metrics
  ## are dropped first when this buffer fills.
  metric_buffer_limit = 10000

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "0s"

  ## Default flushing interval for all outputs. You shouldn't set this below
  ## interval. Maximum flush_interval will be flush_interval + flush_jitter
  flush_interval = "30s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"

  ## By default, precision will be set to the same timestamp order as the
  ## collection interval, with the maximum being 1s.
  ## Precision will NOT be used for service inputs, such as logparser and statsd.
  ## Valid values are "Nns", "Nus" (or "NÂµs"), "Nms", "Ns".
  precision = ""
  ## Run telegraf in debug mode
  debug = false
  ## Run telegraf in quiet mode
  quiet = false
  ## Override default hostname, if empty use os.Hostname()
  #hostname = "perf-host"
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false
  logfile = "/Program Files/Telegraf/telegraf.log"


###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################

# # Configuration for Wavefront proxy to send metrics to
[[outputs.wavefront]]
  # UPDATE THIS TO PROPER HOST FOR WAVEFRONT PROXY
  host = "localhost"
  port = 2878

###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################

[[inputs.win_perf_counters.object]]
  ObjectName = "Hyper-V Hypervisor Logical Processor"
  Instances = ["*"]
  Counters = ["% Guest Run Time", "% Hypervisor Run Time", "% Total Run Time", "Context Switches/sec", "C1 Transitions/sec", "C2 Transitions/sec", "C3 Transitions/sec", "Hardware Interrupts/sec", "Hypervisor L1 Data Cache Flushes/sec", "Inter-Processor Interrupts Sent/sec", "Inter-Processor Interrupts/sec"]
  Measurement = "hyv.cpu"
  IncludeTotal = true

[[inputs.win_perf_counters.object]]
  ObjectName = "LogicalDisk"
  Instances = ["*"]
  Counters = ["% Disk Read Time", "% Disk Write Time", "% Free Space", "% Idle Time", "Avg. Disk Bytes/Read", "Avg. Disk Bytes/Write", "Avg. Disk Queue Length", "Avg. Disk sec/Read", "Avg. Disk sec/Write", "Avg. Disk Write Queue Length", "Free Megabytes", "Split IO/Sec"]
  Measurement = "hyv.disk"

[[inputs.win_perf_counters.object]]
  ObjectName = "Hyper-V Dynamic Memory Balancer"
  Instances = ["*"]
  Counters = ["Available Memory", "Available Memory For Balancing", "Average Pressure", "System Current Pressure"]
  Measurement = "hyv.mem.dyn"

[[inputs.win_perf_counters.object]]
  ObjectName = "Hyper-V Dynamic Memory VM"
  Instances = ["*"]
  Counters = ["Added Memory", "Average Pressure", "Current Pressure", "Guest Visible Physical Memory", "Maximum Pressure", "Memory Add Operations", "Memory Remove Operations", "Minimum Pressure", "Physical Memory", "Removed Memory", "Smart Paging Working Set Size"]
  Measurement = "hyv.mem.dynVM"

[[inputs.win_perf_counters.object]]
  ObjectName = "Memory"
  Counters = ["Available Bytes", "Cache Bytes", "Committed Bytes", "Cache Faults/sec", "Demand Zero Faults/sec", "Page Faults/sec", "Pages/sec", "Transition Faults/sec", "Pool Nonpaged Bytes", "Pool Paged Bytes"]
  Instances = ["------"]
  Measurement = "hyv.mem"

[[inputs.win_perf_counters.object]]
  ObjectName = "Network Interface"
  Counters = ["Bytes Received/sec", "Bytes Sent/sec", "Packets Outbound Discarded", "Packets Outbound Errors", "Packets Received Discarded", "Packets Received Errors", "Packets Received/sec", "Packets Sent/sec"]
  Instances = ["*"] 
  Measurement = "hyv.net"
  IncludeTotal = true
	
[[inputs.win_perf_counters.object]]
  ObjectName = "Paging File"
  Counters = ["% Usage"]
  Instances = ["*"]
  Measurement = "hyv.paging"
  IncludeTotal = true
	
[[inputs.win_perf_counters.object]]
  ObjectName = "Process"
  Counters = ["% Privileged Time", "% Processor Time", "% User Time", "Elapsed Time", "Handle Count", "IO Read Bytes/sec", "IO Read Operations/sec", "IO Write Bytes/sec", "IO Write Operations/sec", "Private Bytes", "Thread Count", "Virtual Bytes", "Working Set", "Working Set - Private"]
  Instances = ["_Total"]         # Replace this with a list of process names that you want to monitor. "_Total" is all processes combined
  Measurement = "hyv.process"
	
[[inputs.win_perf_counters.object]]
  ObjectName = "System"
  Counters = ["Context Switches/sec", "Processes", "Processor Queue Length", "System Calls/sec", "System Up Time", "Threads"]
  Instances = ["------"]
  Measurement = "hyv.system"

[[inputs.win_perf_counters.object]]
  ObjectName = "TCPv4"
  Counters = ["Connection Failures", "Connections Active", "Connections Established", "Connections Passive", "Connection Reset", "Segments Received/sec", "Segments Retransmitted/sec", "Segments Sent/sec"]
  Instances = ["------"]
  Measurement = "hyv.net.tcp"

[[inputs.win_perf_counters.object]]
  ObjectName = "TCPv6"
  Counters = ["Connection Failures", "Connections Active", "Connections Established", "Connections Passive", "Connection Reset", "Segments Received/sec", "Segments Retransmitted/sec", "Segments Sent/sec"]
  Instances = ["------"]
  Measurement = "hyv.net.tcp"
  
[[inputs.win_perf_counters.object]]
  ObjectName = "UDPv4"
  Counters = ["Datagrams No Port/sec", "Datagrams Received/Errors", "Datagrams Received/sec", "Datagrams Sent/sec"]
  Instances = ["------"]
  Measurement = "hyv.net.udp"
  
[[inputs.win_perf_counters.object]]
  ObjectName = "UDPv6"
  Counters = ["Datagrams No Port/sec", "Datagrams Received/Errors", "Datagrams Received/sec", "Datagrams Sent/sec"]
  Instances = ["------"]
  Measurement = "hyv.net.udp"

[[inputs.win_perf_counters.object]]
  ObjectName = "SQLServer:SQL Statistics"
  Counters = ["Batch Requests/sec"]
  Instances = ["------"]
  Measurement = "hyv.sql"

[[inputs.socket_listener]]
  service_address = "udp://:8094"
